<UserControl x:Class="Pete.Views.EntryEditor"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:prism="http://prismlibrary.com/"         
             xmlns:local="clr-namespace:Pete"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:vms="clr-namespace:Pete.ViewModels"
             xmlns:modelLogs="clr-namespace:Pete.Models.Logs"
             xmlns:vmslog="clr-namespace:Pete.ViewModels.Logs"
             prism:ViewModelLocator.AutoWireViewModel="True"
             xmlns:res="clr-namespace:Pete.Resources">
    <UserControl.Resources>
    </UserControl.Resources>
    <UserControl.InputBindings>
        <KeyBinding Command="{Binding DeleteEntryCommand}" Key="Delete"/>
    </UserControl.InputBindings>
    <Grid>
        <Border Margin="15" Style="{DynamicResource Border.Card}"/>
        <Grid Margin="30,30">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="15"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="10"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <local:TextboxHint Hint="entry title" TabIndex="0" Text="{Binding Title, UpdateSourceTrigger=PropertyChanged}" Error="{Binding TitleError}">
                <local:TextboxHint.RenderTransform>
                    <TranslateTransform Y="-70"/>
                </local:TextboxHint.RenderTransform>
                <local:TextboxHint.Style>
                    <Style TargetType="{x:Type local:TextboxHint}">
                        <Setter Property="IsReadOnly" Value="False"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsInEditMode}" Value="False">
                                <Setter Property="IsReadOnly" Value="True"/>
                            </DataTrigger>
                            <EventTrigger RoutedEvent="Loaded">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TranslateTransform.Y)" To="0" Duration="0:0:0.25" DecelerationRatio="0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Style.Triggers>
                    </Style>
                </local:TextboxHint.Style>
            </local:TextboxHint>
            <ComboBox Grid.Column="1" TabIndex="1" Margin="10,0,0,0" IsEnabled="{Binding IsInEditMode}" ItemsSource="{Binding Categories}" SelectedIndex="{Binding SelectedCategoryIndex, Mode=TwoWay}">
                <ComboBox.Style>
                    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBox.Category}">
                        <Style.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.85"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ComboBox.Style>
                <ComboBox.RenderTransform>
                    <TranslateTransform Y="-70"/>
                </ComboBox.RenderTransform>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                        <prism:InvokeCommandAction Command="{Binding ComboBoxSelection}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <ComboBox.Resources>
                    <DataTemplate DataType="{x:Type vms:CategoryViewModel}">
                        <TextBlock Style="{DynamicResource TextBlock.ComboBox.Category}"/>
                    </DataTemplate>
                </ComboBox.Resources>
                <ComboBox.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TranslateTransform.Y)" To="0" BeginTime="0:0:0.15" Duration="0:0:0.25" DecelerationRatio="0.2"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </ComboBox.Triggers>
            </ComboBox>
            <TextBox TabIndex="2" Text="{Binding Data}" Grid.Row="1" CaretBrush="{DynamicResource Brush.Text}" TextWrapping="Wrap" Padding="5" Grid.ColumnSpan="2" Grid.RowSpan="2" Margin="5,10" AcceptsReturn="True" IsReadOnlyCaretVisible="False" Opacity="0">
                <TextBox.Style>
                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBox.Editor}">
                        <Setter Property="IsReadOnly" Value="False"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsInEditMode}" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource Brush.Text.Shade(25)}"/>
                                <Setter Property="IsReadOnly" Value="True"/>
                            </DataTrigger>
                            <EventTrigger RoutedEvent="Loaded">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(TextBox.Opacity)" From="0" To="1" BeginTime="0:0:0.25" Duration="0:0:0.35" DecelerationRatio="0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBox.Style>
            </TextBox>
            <Grid Grid.Column="3" Grid.RowSpan="4" MinWidth="100">
                <Grid.RenderTransform>
                    <TranslateTransform X="200"/>
                </Grid.RenderTransform>
                <Grid.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="(Grid.RenderTransform).(TranslateTransform.X)" To="0" Duration="0:0:0.25" BeginTime="0:0:0.25" DecelerationRatio="0.2"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </Grid.Triggers>
                <Border Margin="5,0" Style="{DynamicResource Border.Card}"/>
                <Grid Margin="15,10">
                    <Grid.Resources>
                        <Style x:Key="TextBlock.Icon" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlock.Main}">
                            <Setter Property="Margin" Value="2.5,5,10,5"/>
                            <Setter Property="FontSize" Value="26"/>
                            <Setter Property="FontFamily" Value="{DynamicResource Font.Assets}"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>
                        </Style>
                        <Style x:Key="TimeDisplay" TargetType="{x:Type res:TimeDisplay}" BasedOn="{StaticResource TextBlock.Main}">
                            <Setter Property="TextAlignment" Value="Left"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>
                            <Setter Property="Postfix" Value=" ago"/>
                        </Style>
                    </Grid.Resources>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Style="{DynamicResource TextBlock.Icon}" ToolTip="last viewed" Text="{DynamicResource Text.Eye}"/>
                    <TextBlock Style="{DynamicResource TextBlock.Icon}" Grid.Row="1"  ToolTip="last edited" Text="{DynamicResource Text.Wrench}"/>
                    <TextBlock Style="{DynamicResource TextBlock.Icon}" Grid.Row="2" ToolTip="first created" Text="{DynamicResource Text.Pen}"/>
                    
                    <res:TimeDisplay Style="{DynamicResource TimeDisplay}" Grid.Column="1" Date="{Binding EditDate}"/>
                    <res:TimeDisplay Style="{DynamicResource TimeDisplay}" Grid.Column="1" Grid.Row="1" Date="{Binding ViewDate}"/>
                    <res:TimeDisplay Style="{DynamicResource TimeDisplay}" Grid.Column="1" Grid.Row="2" Date="{Binding CreateDate}"/>

                    <Grid Grid.Row="4" Grid.ColumnSpan="2">
                        <Grid.Style>
                            <Style TargetType="{x:Type Grid}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ShowLastLogs}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        
                        <Border Grid.RowSpan="3" Background="{DynamicResource Brush.Background.Tint(2)}" CornerRadius="5"/>

                        <TextBlock Style="{DynamicResource TextBlock.Main}" Text="recent logs" FontWeight="Medium" TextDecorations="Underline" Margin="0,5,0,0"/>
                        <ItemsControl ItemsSource="{Binding LastLogs}" Grid.Row="1" Focusable="False" FocusVisualStyle="{x:Null}" Margin="0,0,0,3">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                <StackPanel Orientation="Vertical"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                            <ItemsControl.Resources>
                                <DataTemplate DataType="{x:Type vmslog:EditorEntryLogViewModel}">
                                    <Grid Margin="0,4">
                                        <Border Opacity="0" Style="{DynamicResource Border.Card}" CornerRadius="0"/>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBlock Margin="5,3" Style="{DynamicResource TextBlock.Icon}" FontSize="16" Text="{Binding Icon}"/>
                                            <res:TimeDisplay Margin="0,2,5,0" Grid.Column="1" 
                                                             Style="{DynamicResource TimeDisplay}" Date="{Binding Date}"/>
                                        </Grid>
                                    </Grid>
                                </DataTemplate>
                            </ItemsControl.Resources>
                        </ItemsControl>

                        <Button Grid.Row="2" Margin="7,0,7,7" Style="{DynamicResource Button.Base}" Content="view all"/>
                    </Grid>


                </Grid>
            </Grid>
            <Grid Grid.Row="3" Grid.ColumnSpan="2">
                <Grid.RenderTransform>
                    <TranslateTransform Y="100"/>
                </Grid.RenderTransform>
                <Grid.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="(Grid.RenderTransform).(TranslateTransform.Y)" To="0" BeginTime="0:0:0.30" DecelerationRatio="0.2" Duration="0:0:0.25"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </Grid.Triggers>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Button TabIndex="5" Command="{Binding DeleteEntryCommand}" Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Trash}">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding CanDelete}" Value="True"/>
                                        <Condition Binding="{Binding IsInEditMode}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Visibility" Value="Visible"/>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button TabIndex="4" IsCancel="True" Grid.Column="2" Height="32">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Base}">
                            <Setter Property="Content" Value="go back"/>
                            <Setter Property="Command" Value="{Binding GoBackCommand}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsInEditMode}" Value="True">
                                    <Setter Property="Content" Value="cancel"/>
                                    <Setter Property="Command" Value="{Binding CancelEditCommand}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button TabIndex="3" Grid.Column="3" Height="32">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Primary}">
                            <Setter Property="Content" Value="edit"/>
                            <Setter Property="Command" Value="{Binding StartEditCommand}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsInEditMode}" Value="True">
                                    <Setter Property="Content" Value="save"/>
                                    <Setter Property="Command" Value="{Binding SaveEditCommand}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
            </Grid>
        </Grid>
    </Grid>
</UserControl>
