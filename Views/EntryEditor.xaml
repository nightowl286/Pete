<UserControl x:Class="Pete.Views.EntryEditor"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:prism="http://prismlibrary.com/"         
             xmlns:local="clr-namespace:Pete"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:vms="clr-namespace:Pete.ViewModels"
             prism:ViewModelLocator.AutoWireViewModel="True">
    <UserControl.InputBindings>
        <KeyBinding Command="{Binding DeleteEntryCommand}" Key="Delete"/>
    </UserControl.InputBindings>
    <Grid>
        <Border Margin="15" Style="{DynamicResource Border.Card}"/>
        <Grid Margin="30,30">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="15"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="10"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <local:TextboxHint Hint="entry title" FocusManager.FocusedElement="{Binding RelativeSource={RelativeSource Self}}" TabIndex="0" Text="{Binding Title, UpdateSourceTrigger=PropertyChanged}" Error="{Binding TitleError}">
                <local:TextboxHint.Style>
                    <Style TargetType="{x:Type local:TextboxHint}">
                        <Setter Property="IsReadOnly" Value="False"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsInEditMode}" Value="False">
                                <Setter Property="IsReadOnly" Value="True"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </local:TextboxHint.Style>
            </local:TextboxHint>
            <ComboBox Style="{DynamicResource ComboBox.Category}" Grid.Column="1" TabIndex="1" Margin="10,0,0,0" IsEnabled="{Binding IsInEditMode}" ItemsSource="{Binding Categories}" SelectedIndex="{Binding SelectedCategoryIndex, Mode=TwoWay}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                        <prism:InvokeCommandAction Command="{Binding ComboBoxSelection}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <ComboBox.Resources>
                    <DataTemplate DataType="{x:Type vms:CategoryViewModel}">
                        <TextBlock Style="{DynamicResource TextBlock.ComboBox.Category}"/>
                    </DataTemplate>
                </ComboBox.Resources>
            </ComboBox>
            <TextBox TabIndex="2" Text="{Binding Data}" Grid.Row="1" CaretBrush="{DynamicResource Brush.Text}" TextWrapping="Wrap" Padding="5" Grid.ColumnSpan="2" Grid.RowSpan="2" Margin="5,10" AcceptsReturn="True" IsReadOnlyCaretVisible="False">
                <TextBox.Style>
                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBox.Editor}">
                        <Setter Property="IsReadOnly" Value="False"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsInEditMode}" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource Brush.Text.Shade(25)}"/>
                                <Setter Property="IsReadOnly" Value="True"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBox.Style>
            </TextBox>
            
            <Border Grid.Column="3" Grid.RowSpan="4" Margin="5,0" Style="{DynamicResource Border.Card}"/>
            <Grid Margin="15,10" Grid.Column="3" Grid.RowSpan="4">
                <StackPanel Orientation="Vertical">
                    <StackPanel Orientation="Horizontal" Margin="2.5,5">
                        <TextBlock Style="{DynamicResource TextBlock.Main}" ToolTip="last viewed" Margin="0,0,10,0" FontSize="26" FontFamily="{DynamicResource Font.Assets}" Text="{DynamicResource Text.Eye}" VerticalAlignment="Center"/>
                        <TextBlock Style="{DynamicResource TextBlock.Main}" ToolTip="{Binding ViewDateString}" Text="{Binding ViewDateDisplay,StringFormat={}{0} ago}" VerticalAlignment="Center"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="2.5,5">
                        <TextBlock Style="{DynamicResource TextBlock.Main}" ToolTip="last edited" Margin="0,0,10,0" FontSize="26" FontFamily="{DynamicResource Font.Assets}" Text="{DynamicResource Text.Wrench}" VerticalAlignment="Center"/>
                        <TextBlock Style="{DynamicResource TextBlock.Main}" ToolTip="{Binding EditDateString}" Text="{Binding EditDateDisplay,StringFormat={}{0} ago}" VerticalAlignment="Center"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="2,5.5">
                        <TextBlock Style="{DynamicResource TextBlock.Main}" ToolTip="first created" Margin="0,0,10,0" FontSize="26" FontFamily="{DynamicResource Font.Assets}" Text="{DynamicResource Text.Pen}" VerticalAlignment="Center"/>
                        <TextBlock Style="{DynamicResource TextBlock.Main}" ToolTip="{Binding CreateDateString}" Text="{Binding CreateDateDisplay,StringFormat={}{0} ago}" VerticalAlignment="Center"/>
                    </StackPanel>
                </StackPanel>
            </Grid>
            <Grid Grid.Row="3" Grid.ColumnSpan="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Button TabIndex="5" Command="{Binding DeleteEntryCommand}" Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Trash}">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding CanDelete}" Value="True"/>
                                        <Condition Binding="{Binding IsInEditMode}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Visibility" Value="Visible"/>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button TabIndex="4" IsCancel="True" Grid.Column="2">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Base}">
                            <Setter Property="Content" Value="go back"/>
                            <Setter Property="Command" Value="{Binding GoBackCommand}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsInEditMode}" Value="True">
                                    <Setter Property="Content" Value="cancel"/>
                                    <Setter Property="Command" Value="{Binding CancelEditCommand}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button TabIndex="3" Grid.Column="3">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Primary}">
                            <Setter Property="Content" Value="edit"/>
                            <Setter Property="Command" Value="{Binding StartEditCommand}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsInEditMode}" Value="True">
                                    <Setter Property="Content" Value="save"/>
                                    <Setter Property="Command" Value="{Binding SaveEditCommand}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
            </Grid>
        </Grid>
    </Grid>
</UserControl>
